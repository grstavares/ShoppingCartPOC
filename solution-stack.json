{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Shopping Cart POC using microservices architecture",

    "Parameters": {
        "StageName" : {
            "Type" : "String",
            "Default" : "poc",
            "Description" : "Name of the API Gateway Stage Where the API will be available."
          }
    },

    "Resources": {

        "MainTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    { "AttributeName" : "cartId", "AttributeType" : "S" },
                    {"AttributeName" : "sku", "AttributeType" : "S" }],
                "BillingMode": "PAY_PER_REQUEST",
                "KeySchema": [
                    { "AttributeName" : "cartId", "KeyType" : "HASH" },
                    { "AttributeName" : "sku", "KeyType" : "RANGE" }],
                "TableName": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-MainTable"]] },
                "Tags": [
                    {"Key" : "Project", "Value" : "Darjelling"},
                    {"Key" : "Service", "Value" : "ShoppingCart"},
                    {"Key" : "Developer", "Value" : "GustavoTavares"},
                    {"Key" : "Version", "Value" : "POC"}]
            }
        },

        "MainFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": "./dist/index.js",
                "FunctionName": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-MainFunction"]] },
                "Description": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-MainFunction"]] },
                "Handler": "index.handler",
                "Runtime": "nodejs8.10",
                "Timeout": 10,
                "MemorySize": 128,
                "Environment": {
                    "Variables" : { "DYNAMO_TABLE_NAME": { "Ref": "MainTable" }, "SNS_TOPIC_ARN": { "Ref": "MessageBus" } }
                },
                "Role": { "Fn::GetAtt": ["MainFunctionExecutionRole", "Arn"] }
            }
        },

        "MessageBus": {
            "Type" : "AWS::SNS::Topic",
            "Properties" : {
              "DisplayName" : { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-Topic"]] },
              "TopicName" : { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-Topic"]] }
            }
        },

        "MainFunctionExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-MainFunction-ExecRole"]] },
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": { "Service": ["lambda.amazonaws.com"] },
                        "Action": ["sts:AssumeRole"]
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "root",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [{
                                "Effect": "Allow",
                                "Resource": { "Fn::GetAtt" : [ "MainTable", "Arn" ] },
                                "Action": ["dynamodb:GetItem", "dynamodb:Query", "dynamodb:Scan", "dynamodb:BatchGetItem", "dynamodb:BatchWriteItem", "dynamodb:PutItem", "dynamodb:UpdateItem", "dynamodb:DeleteItem"]
                            },
                            {
                                "Effect": "Allow",
                                "Resource": { "Ref": "MessageBus" },
                                "Action": ["sns:Publish"]
                            },
                            {
                                "Effect": "Allow",
                                "Resource": "*",
                                "Action": ["cloudwatch:PutMetricData", "logs:CreateLogGroup", "logs:PutLogEvents", "logs:CreateLogStream"]
                            },
                            {
                                "Effect": "Allow",
                                "Resource": "*",
                                "Action": ["xray:PutTelemetryRecords", "xray:PutTraceSegments"]
                            }
                        ]
                    }
                }]
            }
        },

        "GatewayInvokeLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:invokeFunction",
            "FunctionName": { "Fn::GetAtt": ["MainFunction", "Arn"] },
            "Principal": "apigateway.amazonaws.com",
            "SourceArn": {
              "Fn::Join": ["", ["arn:aws:execute-api:", { "Ref": "AWS::Region" }, ":", { "Ref": "AWS::AccountId" }, ":", { "Ref": "RestApi" }, "/*"]]
            }
          }
        },

        "RestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Description": { "Fn::Join": ["", ["REST API for Shopping Cart POC - ", { "Ref": "AWS::StackName" }]] },
              "Name": { "Fn::Join": ["-", [{ "Ref": "AWS::StackName" }, "API"]] }
            }
        },

        "APIDeployment": {
            "Type" : "AWS::ApiGateway::Deployment",
            "Properties" : {
              "Description" : "Automated API Deployment",
              "RestApiId"   : { "Ref": "RestApi" },
              "StageName"   : { "Ref" : "StageName" },
              "StageDescription" : {
                "CachingEnabled" : false,
                "DataTraceEnabled" : false,
                "Description" : "Stage for POC Evaluation",
                "TracingEnabled" : true
              }
            },
            "DependsOn" : [
                "ApiResourceCartGET", "ApiResourceCartPOST", "ApiResourceCartDELETE", "ApiResourceCartOPTIONS",
                "ApiResourceProductGET", "ApiResourceProductPUT", "ApiResourceProductDELETE", "ApiResourceProductOPTIONS",
                "ApiResourceConversionPOST"
            ]
        },

        "ApiResourceCart": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": { "Ref": "RestApi" },
              "ParentId": { "Fn::GetAtt": ["RestApi", "RootResourceId"] },
              "PathPart": "cart"
            }
        },

        "ApiResourceProduct": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": { "Ref": "RestApi" },
              "ParentId": { "Ref": "ApiResourceCart" },
              "PathPart": "{productSku}"
            }
        },

        "ApiResourceConversion": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "RestApiId": { "Ref": "RestApi" },
              "ParentId": { "Fn::GetAtt": ["RestApi", "RootResourceId"] },
              "PathPart": "conversion"
            }
        },

        "ApiResourceCartOPTIONS": {
            "DependsOn": "GatewayInvokeLambdaPermission",
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType" : "NONE",
              "HttpMethod" : "OPTIONS",
              "ResourceId" : { "Ref": "ApiResourceCart" },
              "RestApiId" : { "Ref": "RestApi" },
              "Integration" : {
                "Type" : "MOCK",
                "IntegrationResponses" : [ {
                  "StatusCode" : "200",
                  "ResponseParameters" : {
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                   },
                   "ResponseTemplates" : { "application/json": "{'statusCode': 200}" }
                } ],
                "PassthroughBehavior" : "WHEN_NO_MATCH"
              },
              "MethodResponses" : [ {
                "StatusCode" : "200",
                "ResponseParameters" : {
                  "method.response.header.Access-Control-Allow-Headers": false,
                  "method.response.header.Access-Control-Allow-Methods": false,
                  "method.response.header.Access-Control-Allow-Origin": false
                 }
                } ]
            }
        },

        "ApiResourceCartGET": {
            "DependsOn": "GatewayInvokeLambdaPermission",
            "Type": "AWS::ApiGateway::Method",

            "Properties": {

              "AuthorizationType": "NONE",
              "HttpMethod": "GET",
              "RestApiId": { "Ref": "RestApi" },
              "ResourceId": { "Ref": "ApiResourceCart" },
              "RequestParameters": { "method.request.querystring.sessionId": true },
              "Integration": {
                "Type": "AWS_PROXY",
                "IntegrationHttpMethod": "POST",
                "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
              }

            }
        },

        "ApiResourceCartPOST": {
            "DependsOn": "GatewayInvokeLambdaPermission",
            "Type": "AWS::ApiGateway::Method",

            "Properties": {

              "AuthorizationType": "NONE",
              "HttpMethod": "POST",
              "RestApiId": { "Ref": "RestApi" },
              "ResourceId": { "Ref": "ApiResourceCart" },
              "RequestParameters": { "method.request.querystring.sessionId": true },
              "Integration": {
                "Type": "AWS_PROXY",
                "IntegrationHttpMethod": "POST",
                "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
              }

            }
        },

        "ApiResourceCartDELETE": {
            "DependsOn": "GatewayInvokeLambdaPermission",
            "Type": "AWS::ApiGateway::Method",

            "Properties": {

              "AuthorizationType": "NONE",
              "HttpMethod": "DELETE",
              "RestApiId": { "Ref": "RestApi" },
              "ResourceId": { "Ref": "ApiResourceCart" },
              "RequestParameters": { "method.request.querystring.sessionId": true },
              "Integration": {
                "Type": "AWS_PROXY",
                "IntegrationHttpMethod": "POST",
                "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
              }

            }
        },

        "ApiResourceProductOPTIONS": {
            "DependsOn": "GatewayInvokeLambdaPermission",
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType" : "NONE",
              "HttpMethod" : "OPTIONS",
              "ResourceId" : { "Ref": "ApiResourceProduct" },
              "RestApiId" : { "Ref": "RestApi" },
              "Integration" : {
                "Type" : "MOCK",
                "IntegrationResponses" : [ {
                  "StatusCode" : "200",
                  "ResponseParameters" : {
                    "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'",
                    "method.response.header.Access-Control-Allow-Methods": "'POST,OPTIONS'",
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                   },
                   "ResponseTemplates" : { "application/json": "{'statusCode': 200}" }
                } ],
                "PassthroughBehavior" : "WHEN_NO_MATCH"
              },
              "MethodResponses" : [ {
                "StatusCode" : "200",
                "ResponseParameters" : {
                  "method.response.header.Access-Control-Allow-Headers": false,
                  "method.response.header.Access-Control-Allow-Methods": false,
                  "method.response.header.Access-Control-Allow-Origin": false
                 }
                } ]
            }
        },

        "ApiResourceProductGET": {
            "DependsOn": "GatewayInvokeLambdaPermission",
            "Type": "AWS::ApiGateway::Method",

            "Properties": {

              "AuthorizationType": "NONE",
              "HttpMethod": "GET",
              "RestApiId": { "Ref": "RestApi" },
              "ResourceId": { "Ref": "ApiResourceProduct" },
              "RequestParameters": { "method.request.querystring.sessionId": true, "method.request.path.productSku": true },
              "Integration": {
                "Type": "AWS_PROXY",
                "IntegrationHttpMethod": "POST",
                "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
              }

            }
        },

        "ApiResourceProductPUT": {
            "DependsOn": "GatewayInvokeLambdaPermission",
            "Type": "AWS::ApiGateway::Method",

            "Properties": {

              "AuthorizationType": "NONE",
              "HttpMethod": "PUT",
              "RestApiId": { "Ref": "RestApi" },
              "ResourceId": { "Ref": "ApiResourceProduct" },
              "RequestParameters": { "method.request.querystring.sessionId": true, "method.request.path.productSku": true },
              "Integration": {
                "Type": "AWS_PROXY",
                "IntegrationHttpMethod": "POST",
                "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
              }

            }
        },

        "ApiResourceProductDELETE": {
            "DependsOn": "GatewayInvokeLambdaPermission",
            "Type": "AWS::ApiGateway::Method",

            "Properties": {

              "AuthorizationType": "NONE",
              "HttpMethod": "DELETE",
              "RestApiId": { "Ref": "RestApi" },
              "ResourceId": { "Ref": "ApiResourceProduct" },
              "RequestParameters": { "method.request.querystring.sessionId": true, "method.request.path.productSku": true },
              "Integration": {
                "Type": "AWS_PROXY",
                "IntegrationHttpMethod": "POST",
                "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
              }

            }
        },

        "ApiResourceConversionPOST": {
            "DependsOn": "GatewayInvokeLambdaPermission",
            "Type": "AWS::ApiGateway::Method",

            "Properties": {

              "AuthorizationType": "NONE",
              "HttpMethod": "POST",
              "RestApiId": { "Ref": "RestApi" },
              "ResourceId": { "Ref": "ApiResourceConversion" },
              "RequestParameters": { "method.request.querystring.sessionId": true },
              "Integration": {
                "Type": "AWS_PROXY",
                "IntegrationHttpMethod": "POST",
                "Uri": { "Fn::Join": ["",[ "arn:aws:apigateway:", { "Ref": "AWS::Region"}, ":lambda:path/2015-03-31/functions/", { "Fn::GetAtt": ["MainFunction", "Arn"]}, "/invocations" ] ] }
              }

            }
        },

        "AppSyncExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [{
                  "Effect": "Allow",
                  "Principal": { "Service": ["appsync.amazonaws.com"] },
                  "Action": ["sts:AssumeRole"]
                }]
              },
              "Path": "/",
              "Policies": [{
                "PolicyName": "root",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Resource": { "Fn::GetAtt": ["MainTable", "Arn"] },
                      "Action": [
                        "dynamodb:GetItem", "dynamodb:Query", "dynamodb:Scan",
                        "dynamodb:BatchGetItem", "dynamodb:BatchWriteItem",
                        "dynamodb:PutItem", "dynamodb:UpdateItem", "dynamodb:DeleteItem" ]
                    }, {
                        "Effect": "Allow",
                        "Resource": [
                            { "Fn::GetAtt": ["MainFunction", "Arn"] },
                            { "Fn::Join": ["", [{ "Fn::GetAtt": ["MainFunction", "Arn"] }, ":*"]] }
                        ],
                        "Action": ["lambda:invokeFunction"]
                    }, {
                      "Effect": "Allow",
                      "Resource": "*",
                      "Action": ["logs:CreateLogGroup", "logs:PutLogEvents", "logs:CreateLogStream"]
                    }
                  ]
                }
              }]
            }
        },

        "GraphQLEndpoint": {
            "Type" : "AWS::AppSync::GraphQLApi",
            "Properties" : {
              "Name" : { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "-GraphQL"]] },
              "AuthenticationType" : "API_KEY",
              "LogConfig" : {
                "CloudWatchLogsRoleArn" : { "Fn::GetAtt": ["AppSyncExecutionRole", "Arn"] },
                "FieldLogLevel" : "NONE"
              }
            }
        },

        "GraphQLAPIKey": {
            "Type" : "AWS::AppSync::ApiKey",
            "Properties" : {
                "Description" : "POC Key",
                "ApiId" : { "Fn::GetAtt" : [ "GraphQLEndpoint", "ApiId" ] }
            }
        },

        "GraphQLDataSource" : {
            "Type" : "AWS::AppSync::DataSource",
            "Properties" : {
            "Type" : "AMAZON_DYNAMODB",
            "Description" : "ShoppingCart Microservice Repository",
            "ServiceRoleArn" : { "Fn::GetAtt": ["AppSyncExecutionRole", "Arn"] },
            "ApiId" : { "Fn::GetAtt": ["GraphQLEndpoint", "ApiId"] },
            "Name" : { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "DataSource"]] },
            "DynamoDBConfig" : {
                "TableName" : { "Ref": "MainTable" },
                "AwsRegion" : { "Ref" : "AWS::Region" },
                "UseCallerCredentials" : false
            }
            }
        },

        "GraphQLLambdaDataSource" : {
            "Type" : "AWS::AppSync::DataSource",
            "Properties" : {
            "Type" : "AWS_LAMBDA",
            "Description" : "ShoppingCart Microservice Main Function",
            "ServiceRoleArn" : { "Fn::GetAtt": ["AppSyncExecutionRole", "Arn"] },
            "ApiId" : { "Fn::GetAtt": ["GraphQLEndpoint", "ApiId"] },
            "Name" : { "Fn::Join": ["", [{ "Ref": "AWS::StackName" }, "LambdaDataSource"]] },
            "LambdaConfig" : {
                "LambdaFunctionArn" : { "Fn::GetAtt": ["MainFunction", "Arn"] }
              }
            }
        },

        "GraphQLSchema": {
            "Type" : "AWS::AppSync::GraphQLSchema",
            "Properties" : {
            "ApiId" : { "Fn::GetAtt": ["GraphQLEndpoint", "ApiId"] },
            "DefinitionS3Location" : "./ShoppingCartSchema.graphql"
            }
        },

        "GraphQLQueryCartResolver": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQLSchema",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [ "GraphQLEndpoint", "ApiId" ]
                },
                "TypeName": "Query",
                "FieldName": "cart",
                "DataSourceName": { "Fn::GetAtt": [ "GraphQLDataSource", "Name" ] },
                "RequestMappingTemplateS3Location": "./src/graphqlresolvers/getCart.resolver.velocity",
                "ResponseMappingTemplateS3Location": "./src/graphqlresolvers/getCart.response.velocity"
            }
        },

        "GraphQLQueryProductResolver": {
            "Type": "AWS::AppSync::Resolver",
            "DependsOn": "GraphQLSchema",
            "Properties": {
                "ApiId": {
                    "Fn::GetAtt": [ "GraphQLEndpoint", "ApiId" ]
                },
                "TypeName": "Query",
                "FieldName": "product",
                "DataSourceName": {
                    "Fn::GetAtt": [ "GraphQLDataSource", "Name" ]
                },
                "RequestMappingTemplateS3Location": "./src/graphqlresolvers/getProduct.resolver.velocity",
                "ResponseMappingTemplateS3Location": "./src/graphqlresolvers/getProduct.response.velocity"
            }
        }

    },

    "Outputs": {

        "APIUrl": {
            "Value": { "Fn::Join" : [ "", [ "https://", { "Ref" : "RestApi" }, ".execute-api.", { "Ref" : "AWS::Region" }, ".amazonaws.com/", { "Ref" : "StageName" }, "/" ] ] },
            "Description": "The Endpoint URL of REST API."
        },

        "GraphQLUrl": {
          "Value": { "Fn::GetAtt" : [ "GraphQLEndpoint", "GraphQLUrl" ] },
          "Description": "The Endpoint URL of GraphQL API."
        },

        "GraphQLAPIKey": {
          "Value": { "Fn::GetAtt" : [ "GraphQLAPIKey", "ApiKey" ] },
          "Description": "The AOIKey of GraphQL API."
        }


    }

}
