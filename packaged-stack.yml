AWSTemplateFormatVersion: '2010-09-09'
Description: Shopping Cart POC using microservices architecture
Outputs:
  APIUrl:
    Description: The Endpoint URL of API.
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: RestApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/
        - Ref: StageName
        - /
Parameters:
  StageName:
    Default: poc
    Description: Name of the API Gateway Stage Where the API will be available.
    Type: String
Resources:
  APIDeployment:
    DependsOn:
    - ApiResourceCartGET
    - ApiResourceCartPOST
    - ApiResourceCartDELETE
    - ApiResourceCartOPTIONS
    - ApiResourceProductGET
    - ApiResourceProductPUT
    - ApiResourceProductDELETE
    - ApiResourceProductOPTIONS
    - ApiResourceConversionPOST
    Properties:
      Description: Automated API Deployment
      RestApiId:
        Ref: RestApi
      StageDescription:
        CachingEnabled: false
        DataTraceEnabled: false
        Description: Stage for POC Evaluation
        TracingEnabled: true
      StageName:
        Ref: StageName
    Type: AWS::ApiGateway::Deployment
  ApiResourceCart:
    Properties:
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: cart
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Resource
  ApiResourceCartDELETE:
    DependsOn: GatewayInvokeLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - MainFunction
              - Arn
            - /invocations
      RequestParameters:
        method.request.querystring.sessionId: true
      ResourceId:
        Ref: ApiResourceCart
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Method
  ApiResourceCartGET:
    DependsOn: GatewayInvokeLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - MainFunction
              - Arn
            - /invocations
      RequestParameters:
        method.request.querystring.sessionId: true
      ResourceId:
        Ref: ApiResourceCart
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Method
  ApiResourceCartOPTIONS:
    DependsOn: GatewayInvokeLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: '{''statusCode'': 200}'
          StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
        StatusCode: '200'
      ResourceId:
        Ref: ApiResourceCart
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Method
  ApiResourceCartPOST:
    DependsOn: GatewayInvokeLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - MainFunction
              - Arn
            - /invocations
      RequestParameters:
        method.request.querystring.sessionId: true
      ResourceId:
        Ref: ApiResourceCart
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Method
  ApiResourceConversion:
    Properties:
      ParentId:
        Fn::GetAtt:
        - RestApi
        - RootResourceId
      PathPart: conversion
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Resource
  ApiResourceConversionPOST:
    DependsOn: GatewayInvokeLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - MainFunction
              - Arn
            - /invocations
      RequestParameters:
        method.request.querystring.sessionId: true
      ResourceId:
        Ref: ApiResourceConversion
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Method
  ApiResourceProduct:
    Properties:
      ParentId:
        Ref: ApiResourceCart
      PathPart: '{productSku}'
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Resource
  ApiResourceProductDELETE:
    DependsOn: GatewayInvokeLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - MainFunction
              - Arn
            - /invocations
      RequestParameters:
        method.request.path.productSku: true
        method.request.querystring.sessionId: true
      ResourceId:
        Ref: ApiResourceProduct
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Method
  ApiResourceProductGET:
    DependsOn: GatewayInvokeLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - MainFunction
              - Arn
            - /invocations
      RequestParameters:
        method.request.path.productSku: true
        method.request.querystring.sessionId: true
      ResourceId:
        Ref: ApiResourceProduct
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Method
  ApiResourceProductOPTIONS:
    DependsOn: GatewayInvokeLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
            method.response.header.Access-Control-Allow-Methods: '''POST,OPTIONS'''
            method.response.header.Access-Control-Allow-Origin: '''*'''
          ResponseTemplates:
            application/json: '{''statusCode'': 200}'
          StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        Type: MOCK
      MethodResponses:
      - ResponseParameters:
          method.response.header.Access-Control-Allow-Headers: false
          method.response.header.Access-Control-Allow-Methods: false
          method.response.header.Access-Control-Allow-Origin: false
        StatusCode: '200'
      ResourceId:
        Ref: ApiResourceProduct
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Method
  ApiResourceProductPUT:
    DependsOn: GatewayInvokeLambdaPermission
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri:
          Fn::Join:
          - ''
          - - 'arn:aws:apigateway:'
            - Ref: AWS::Region
            - :lambda:path/2015-03-31/functions/
            - Fn::GetAtt:
              - MainFunction
              - Arn
            - /invocations
      RequestParameters:
        method.request.path.productSku: true
        method.request.querystring.sessionId: true
      ResourceId:
        Ref: ApiResourceProduct
      RestApiId:
        Ref: RestApi
    Type: AWS::ApiGateway::Method
  GatewayInvokeLambdaPermission:
    Properties:
      Action: lambda:invokeFunction
      FunctionName:
        Fn::GetAtt:
        - MainFunction
        - Arn
      Principal: apigateway.amazonaws.com
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:aws:execute-api:'
          - Ref: AWS::Region
          - ':'
          - Ref: AWS::AccountId
          - ':'
          - Ref: RestApi
          - /*
    Type: AWS::Lambda::Permission
  MainFunction:
    Properties:
      Code:
        S3Bucket: grstavares-code-us-east-1
        S3Key: e641e89a9e0f34e69c303d486ae2e332
      Description:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - -MainFunction
      Environment:
        Variables:
          DYNAMO_TABLE_NAME:
            Ref: MainTable
          SNS_TOPIC_ARN:
            Ref: MessageBus
      FunctionName:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - -MainFunction
      Handler: index.handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
        - MainFunctionExecutionRole
        - Arn
      Runtime: nodejs8.10
      Timeout: 10
    Type: AWS::Lambda::Function
  MainFunctionExecutionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - dynamodb:GetItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - MainTable
              - Arn
          - Action:
            - sns:Publish
            Effect: Allow
            Resource:
              Ref: MessageBus
          - Action:
            - cloudwatch:PutMetricData
            - logs:CreateLogGroup
            - logs:PutLogEvents
            - logs:CreateLogStream
            Effect: Allow
            Resource: '*'
          - Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: root
      RoleName:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - -MainFunction-ExecRole
    Type: AWS::IAM::Role
  MainTable:
    Properties:
      AttributeDefinitions:
      - AttributeName: cartId
        AttributeType: S
      - AttributeName: sku
        AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
      - AttributeName: cartId
        KeyType: HASH
      - AttributeName: sku
        KeyType: RANGE
      TableName:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - -MainTable
      Tags:
      - Key: Project
        Value: Darjelling
      - Key: Service
        Value: ShoppingCart
      - Key: Developer
        Value: GustavoTavares
      - Key: Version
        Value: POC
    Type: AWS::DynamoDB::Table
  MessageBus:
    Properties:
      DisplayName:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - -Topic
      TopicName:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - -Topic
    Type: AWS::SNS::Topic
  RestApi:
    Properties:
      Description:
        Fn::Join:
        - ''
        - - 'REST API for Shopping Cart POC - '
          - Ref: AWS::StackName
      Name:
        Fn::Join:
        - '-'
        - - Ref: AWS::StackName
          - API
    Type: AWS::ApiGateway::RestApi
